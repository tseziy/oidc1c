#Область ОписаниеПеременных

// Контекст текущего запроса авторизации
&НаКлиенте
Перем 
Запрос, КлючЗапроса;

// Служебные
&НаСервере
Перем 
_Портал;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ИмяПриложения", ИмяПриложения);
	Параметры.Свойство("КлючПриложения", КлючПриложения);	
	Параметры.Свойство("Скоупы", Скоупы);
	Параметры.Свойство("_ХостIdentity", _ХостIdentity);
	Параметры.Свойство("___Http", ___Http);	
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Удаляет сессию по ключу
//
// Параметры:
// 	Ключ - Строка - Ключ настройки
//
&НаКлиенте
Процедура СброситьСессию(Ключ = Неопределено) Экспорт

	Если Ключ = Неопределено Тогда
		КлючСессии = КлючНастроекАвторизация;
	Иначе
		КлючСессии = Ключ;	
	КонецЕсли;

	Если КлючСессии = Неопределено Тогда
		ВызватьИсключение "Ошибка значения: ключ сессии не определен";	
	КонецЕсли;	
	
	_УдалитьСессию(КлючСессии);
	
КонецПроцедуры

// Создает новую или получает сохраненную сессию
//
// Параметры:
// 	Ключ - Строка - Ключ настройки
// Возвращаемое значение:
//  Структура - см. КЭ_Авторизатор.МодельОтветТокен
//
&НаКлиенте
Функция ПолучитьСессию(Ключ = Неопределено) Экспорт

	Если Ключ = Неопределено Тогда
		ВызватьИсключение "Ошибка значения: ключ сессии не определен";	
	КонецЕсли;	
	
	Если Открыта() Тогда
		ВызватьИсключение "Ошибка: Форма должна быть закрыта";	
	КонецЕсли; 
		
	Сессия = _ПолучитьСессию(Ключ);
	Возврат Сессия;	
	
КонецФункции

// Создает новую или получает сохраненную сессию асинхронно
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения после закрытия формы авторизации 
// 	Ключ - Строка - Ключ настройки
//
&НаКлиенте
Процедура НачатьПолучениеСессии(ОписаниеОповещения, Ключ = Неопределено) Экспорт

	Если Ключ = Неопределено Тогда
		КлючСессии = КлючНастроекАвторизация;
	Иначе
		КлючСессии = Ключ;	
	КонецЕсли;

	Если КлючСессии = Неопределено Тогда
		ВызватьИсключение "Ошибка значения: ключ сессии не определен";	
	КонецЕсли;	
	
	Если Открыта() Тогда
		ВызватьИсключение "Ошибка: Форма должна быть закрыта";	
	КонецЕсли;
	
	ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;	
	ЭтаФорма.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		
	Сессия = _ПолучитьСессию(Ключ);
	Если Сессия = Неопределено Тогда
		_НачатьПолучениеСессии(КлючСессии);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Сессия);		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Служебные

// Авторизация

&НаКлиенте
Процедура _НачатьПолучениеСессии(КлючСессии)

	Запрос = _КодУстройства();
	КлючЗапроса = КлючСессии;
	Код = Запрос.КодПользователя;

	Открыть();	

	_ПроверитьТокенАсинх();
	
КонецПроцедуры

&НаКлиенте
Процедура _НачатьПолучениеСессииПослеПроверкиТокена(Результат, ДопПараметры) Экспорт
		
	Запрос = Неопределено;
	КлючЗапроса = Неопределено;	
	
	Если Открыта() Тогда
		Закрыть(Результат);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Результат);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура _ПроверитьТокенАсинх()

	Попытка
		Результат = _ПроверитьТокенНаСервере(Запрос, КлючЗапроса);
	Исключение
		Результат = ИнформацияОбОшибке();		
	КонецПопытки;

	Оповещение = Новый ОписаниеОповещения("_НачатьПолучениеСессииПослеПроверкиТокена", ЭтотОбъект);
	
	Если ТипЗнч(Результат) = Тип("ФиксированнаяСтруктура") 
		И Результат.ТокенДоступа = Неопределено Тогда
		ПодключитьОбработчикОжидания("_ПроверитьТокенАсинх", Запрос.Интервал, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Результат);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция _ПроверитьТокенНаСервере(Знач ЗапросТокена, Знач КлючЗапросаТокена)

	Если ТекущаяУниверсальнаяДата() >= ЗапросТокена.УниверсальнаяДатаОкончания Тогда
		ВызватьИсключение "TimeoutError: вышло время ожидания подтверждения запроса";
	КонецЕсли;
	
	Сессия = _Портал().Токен(ЗапросТокена.Код);	
	Если Сессия.ТокенДоступа <> Неопределено Тогда
		_Портал().СохранитьСессию(КлючЗапросаТокена, Сессия);
	КонецЕсли;
	
	Возврат Сессия;
	
КонецФункции

// Сессия

&НаСервере
Процедура _УдалитьСессию(Знач Ключ)
	
	_Портал().УдалитьСессию(Ключ);	
	
КонецПроцедуры

&НаСервере
Функция _ПолучитьСессию(Знач Ключ)
		
	Возврат _Портал().ПолучитьСессию(Ключ);
		
КонецФункции

// Слжубные

&НаСервере
Функция _КодУстройства()

	Возврат _Портал().КодУстройства();
	
КонецФункции

&НаСервере
Функция _Токен()

	Возврат _Портал().ДевайсКод();		
	
КонецФункции

&НаСервере
Функция _Портал()
	
	Если _Портал <> Неопределено Тогда
		Возврат _Портал;
	КонецЕсли;
	
	_Портал = РеквизитФормыВЗначение("Объект");
	_Портал.Имя = ИмяПриложения;
	_Портал.Ключ = КлючПриложения;
	_Портал.Скоупы = Скоупы;
	_Портал._ХостIdentity = _ХостIdentity;	
	_Портал.Инит();
	
	Возврат _Портал;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьБраузер(Команда)
	
	ПерейтиПоНавигационнойСсылке(Запрос.СсылкаАвторизации);
	
КонецПроцедуры

#КонецОбласти
